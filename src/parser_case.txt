---
in:
Class Shape {
        Val $numOfShape: Int = 0;
        Val immutableAttribute: Int = 0;
        Var length, width: Int;
        $getNumOfShape() {
            Return $numOfShape;
}
}
Class Rectangle: Shape {
    getArea() {
        Return Self.length * Self.width;
    }
}
Class Program {
    main() {
        Out.printInt(Shape::$numOfShape);
    }
}
out:successful
---
in:
Class Diagram{
}
out:successful
---
in:
Class Rectangle: Shape {}
out:successful
---
in:
class Rectangle {}
out:Error on line 1 col 0: class
---
in:
Class _Shape {}
out:successful
---
in:
Class Test_Attribute_1{
    Val My1stCons, My2ndCons: Int = 1 + 5, 2;
    Var $x, $y : Int = 0, 0;
}
out:successful
---
in:
Class Test_Attribute_2{
    Val My1stCons, My2ndCons: Int;
    Val $staticname, nonstatic: String;
    Var $x, $y : Int = 0, 0;
}
out:successful
---
in:
Class Test_Attribute_2{
    My1stCons, My2ndCons: Int;
}
out:Error on line 2 col 13: ,
---
in:
Class Test_Attribute_2{
    Val Var, My2ndCons: Int;
}
out:Error on line 2 col 8: Var
---
in:
Class Test_Attribute_2{
    Val My2ndCons, : Int;
}
out:Error on line 2 col 19: :
---
in:
Class Test_Attribute_2{
    Val My2ndCons, My1ndCons;
}
out:Error on line 2 col 28: ;
---
in:
Class Test_Method{
    method1 (para1: Int; para2: String; para3: Float; para4: Array[Int, 5]; para5: Newclass){}
}
out:successful
---
in:
Class Test_Method{
    Constructor (para1: Int; para2: String; para3: Float; para4: Array[Int, 5]){}
}
out:successful
---
in:
Class Test_Method{
    Destructor (){}
}
out:successful
---
in:
Class Test_Method{
    Destructor (para1: Int){}
}
out:Error on line 2 col 16: para1
---
in:
Class Dog {
    Val breed: String;
    Var age: Int;
    Val color: String;
    barking() {

    }
    hungry(){

    }
    sleeping() {

    }
}
Class Program {
    main(){
        
    }
}
out:successful
---
in:
Class Test_Expression{
    Val x : Int = 1 + 2 * 3 / 4 % 5 - 6;
}
Class Program{
    main(){

    }
}
out:successful
---
in:
Class Test_Expression{
    Var isCorrect: Boolean = True;
    Var isWrong: Boolean = False;
    Val x : Boolean = !isCorrect && isWrong;
}
Class Program{
    main(){
        
    }
}
out:successful
---
in:
Class Test_Expression{
    Var String1: String = "hello";
    Val String2: String = "World";
    Val $StringFinal : String = String1 +. String2;
    Val $AnotherString : String = "String1" +. "String2";
}
Class Program{
    main(){
        
    }
}
out:successful
---
in:
Class Test_Expression{
    Val isSame: Boolean = "This is my string" ==. "This is also another string";
}
Class Program{
    main(){
        
    }
}
out:successful
