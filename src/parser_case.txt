---
in:
Class Shape {
        Val $numOfShape: Int = 0;
        Val immutableAttribute: Int = 0;
        Var length, width: Int;
        $getNumOfShape() {
            Return numOfShape;
}
}
Class Rectangle: Shape {
    getArea() {
        Return Self.length * Self.width;
    }
}
Class Program {
    main() {
        Out.printInt(Shape::$numOfShape);
    }
}
out:successful
---
in:
Class Diagram{
}
out:successful
---
in:
Class Rectangle: Shape {}
out:successful
---
in:
class Rectangle {}
out:Error on line 1 col 0: class
---
in:
Class _Shape {}
out:successful
---
in:
Class Test_Attribute_1{
    Val My1stCons, My2ndCons: Int = 1 + 5, 2;
    Var $x, $y : Int = 0, 0;
}
out:successful
---
in:
Class Test_Attribute_2{
    Val My1stCons, My2ndCons: Int;
    Val $staticname, nonstatic: String;
    Var $x, $y : Int = 0, 0;
}
out:successful
---
in:
Class Test_Attribute_2{
    My1stCons, My2ndCons: Int;
}
out:Error on line 2 col 13: ,
---
in:
Class Test_Attribute_2{
    Val Var, My2ndCons: Int;
}
out:Error on line 2 col 8: Var
---
in:
Class Test_Attribute_2{
    Val My2ndCons, : Int;
}
out:Error on line 2 col 19: :
---
in:
Class Test_Attribute_2{
    Val My2ndCons, My1ndCons;
}
out:Error on line 2 col 28: ;
---
in:
Class Test_Method{
    method1 (para1: Int; para2: String; para3: Float; para4: Array[Int, 5]; para5: Newclass){}
}
out:successful
---
in:
Class Test_Method{
    Constructor (para1: Int; para2: String; para3: Float; para4: Array[Int, 5]){}
}
out:successful
---
in:
Class Test_Method{
    Destructor (){}
}
out:successful
---
in:
Class Test_Method{
    Destructor (para1: Int){}
}
out:Error on line 2 col 16: para1
---
in:
Class Dog {
    Val breed: String;
    Var age: Int;
    Val color: String;
    barking() {

    }
    hungry(){

    }
    sleeping() {

    }
}
Class Program {
    main(){
        
    }
}
out:successful
---
in:
Class Test_Expression{
    Val x : Int = 1 + 2 * 3 / 4 % 5 - 6;
}
Class Program{
    main(){

    }
}
out:successful
---
in:
Class Test_Expression{
    Var isCorrect: Boolean = True;
    Var isWrong: Boolean = False;
    Val x : Boolean = !isCorrect && isWrong;
}
Class Program{
    main(){
        
    }
}
out:successful
---
in:
Class Test_Expression{
    Var String1: String = "hello";
    Val String2: String = "World";
    Val $StringFinal : String = String1 +. String2;
    Val $AnotherString : String = "String1" +. "String2";
}
Class Program{
    main(){
        
    }
}
out:successful
---
in:
Class Test_Expression{
    Val isSame: Boolean = "This is my string" ==. "This is also another string";
}
Class Program{
    main(){
        
    }
}
out:successful
---
in:
Class Shape{
    Val width: Float;
    Val height: Float;
    Constructor(height: Float; width: Float){
        width = width;
        height = height;
    }
    getArea(){
        Return width * height;
    }
}
Class Test_Expression{
    Val getArea: Float = Shape.getArea();
}
Class Program{
    main(){

    }
}
out:successful
---
in:
Class MenuItem: GuiComponents{
    Var LABEL: String;
    Var anchor: Anchor;
    Var bounds: Rectangle;
    Var font: Font;
    Constructor(label: String; hoverColor: Color){
        LABEL = label;
        hoverColor = hoverColor;
    }
    setProperties(anchor: Anchor; x: int; width: int; height: int){
        anchor = anchor;
        bounds = New Rectangle(x,y,width, height);
    }
    update(gametime: GameTime){
        ##Member access##
        
       
        If(bounds.intersects()){
            fontColor = hoverColor;
            Rectangle::$onHover();
            If(Mouse.buttonDownOnce(MouseKeys.BUTTON_1)){
                Test.onClick();
            }
        } Else {
             fontColor = Color.WHITE;
        }
    }
    draw(g2d: Graphic2D){
         g2d.setFont(font);
        g2d.setColor(fontColor);
        g2d.drawString(LABEL, bounds.x + 5, bounds.y + 15);
    }
}
out:successful
---
in:
Class Test_Expression_Member_Access {
    MethodInClass(){
        If(NameClass.AttributeClass){}
        If(NameClass::$StaticAttributeClass){}
        If(NameClass.MethodClass()){}
        If(NameClass::$StaticMethodClass()){}
    }
}
out:successful
---
in:
Class Test_Expression_Member_Access{
    MethodInClass(){
         If(NameClass.MethodClass(1+1, a+b, NameClass.AttributeClass)){}
         If(NameClass::$StaticMethodClass(!BooleanVar, a > b, a >= b)){}
         Elseif(b < a){} Else {Test.doSomething();}
    }
}
out:successful
---
in:
Class Test_Expression_Member_Access{
    MethodInClass() {
        Self::$numOfMotor = Motor::$numOfMotor + 1;
    }
}
out:successful
---
in:
Class FlappyBird:ActionListener {
    Val $FPS, $WIDTH, $HEIGHT: Int = 60, 640, 480;
    Var bird: Bird;
    Var frame: JFrame;
    Var jpanel: JPanel;
    Val rects: Array[String, 5];
    Val time, scroll: Int;
    Val paused: Boolean;

    go(){
        frame = New JFrame("Flappy Bird");
        bird = New bird();
        rects = New Rectangle();
        panel = New GamePanel(Self, bird, rects);
        frame.add(panel);

        frame.setSize(WIDTH, HEIGHT);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(True);
        frame.addKeyListener(Self);
        t = New Timer(1000/FPS, Self);
    }
    actionPerformed(e: ActionEvent){
        panel.repaint();
        If(!paused){
            bird.physics();
            If(scoll % 90 == 0){
                Val r: Rectangle = New Rectangle(WIDTH, 0, GamePanel.PIPE_W, (Math.random()*HEIGHT)/5 + 0.2 * HEIGHT);
                Var h2: Int = (Math.random()*HEIGHT)/5 + 0.2 * HEIGHT;
                Var r2: Rectangle = New Rectangle(WIDTH, HEIGHT - h2, GamePanel.PIPE_W, h2);
                rects.add(r);
                rects.add(r2);
            }

            Foreach(r In 2..100) {
                r.x = r.x - 3;
                If(r.x + r.width <= 0) {
                    toRemove.add(r);
                }
                If(r.contains(bird.x, bird.y)) {
                    JOptionPane.showMessageDialog(frame, "You lose!\\n"+"Your score was: "+time+".");
                    game = false;
                }
            }
            If(bird.y > HEIGHT || (bird.y + bird.RAD < 0)) {
                game = false;
            }
            If((x+y > height) || (x - y >= 0)){}
        }
    }
}
out:successful
---
in:
Class Test_Array{
    Val array: Array[Int, 5] = Array(1,2,3,4);
    Val array: Array[Int, 5] = Array(Array(1,2,3,4),Array(1,2,3,4));
}
out:successful
---
in:
Class _6{
    Var _:Array [String ,0x34];
    $_5(_:Array [Array [Array [String ,35],0b110001],0x34];
    _J,p1:Array [Float ,35];
    v:Boolean ;
    __:__;H:Array [Array [Array [Int ,07_77],07],0X2];
    U:__){}
}
Class s1n{}
out:successful
---
in:
Class F6_{
    Destructor (){}
    _81_4(G:Float ){} 
}
Class S{}
Class _:l{
    Val _:Array [Array [Int ,0b110],0b10];
}
Class _{}
Class _:_{}
Class b{}
Class Q_:_n_{}
Class _{Var __:_;}
Class _{}
out:successful
---
in:
Class e{}
Class _9N1t_:b{
    Constructor (_z0l,R,q:Float ;_:Float ;_X:t){}
    Destructor (){}
    Val $_d,E,__xu,_8g_:Float ;
    Destructor (){}
    Val OfG:Boolean ;
    Val N:Array [Array [Array [Array [Int ,0x81_B],1],074],0X4D];
    Constructor (_:y;_:_s){
        Var _0:Array [Float ,0b1];
    } 
}
Class q_{}
Class S{}
Class _{
    Constructor (R4v_:String ;md:Array [Array [Float ,0b111101],75];v:Float ){
        Break ;
    } 
}Class _7{}
Class j:_{}
out:successful
---
in:
Class Calculator{
    Constructor() {
        window = New JFrame("Calculator");
        window.setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        window.setLocationRelativeTo(null); ## Move window to center##

        comboTheme =  New text("Simple", "Colored", "DarkTheme", 230, 30, "Theme", themeSwitchEventConsumer);

        comboCalcType =  New text("Standard", "Scientific", 20, 30, "Calculator type", calcTypeSwitchEventConsumer);

        Var x: Array[Int, 0] = Array(MARGIN_X, MARGIN_X + 90, 200, 290, 380);
        Var y: Array[Int, 0] =  Array(MARGIN_Y, MARGIN_Y + 100, MARGIN_Y + 180, MARGIN_Y + 260, MARGIN_Y + 340, MARGIN_Y + 420);

        inText = New JTextField("0");
        inText.setBounds(x[0], y[0], 350, 70);
        inText.setEditable(false);
        inText.setBackground(Color.WHITE);
        inText.setFont(New Font("Comic Sans MS", Font.PLAIN, 33));
        window.add(inText);

    }
}
out:successful
---
in:
Class Calculator{
    Calculator() {
          btnC = initBtn("C", x[0], y[1], event.(
              repaintFont(),
            inText.setText("0"),
            opt = ' ',
            val = 0,
          )
            
        );
    }
}
